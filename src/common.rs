#[cfg(test)]
mod tests {
    use solana_sdk::bs58::encode;

    #[test]
    fn test_encode() {
        // let dis = vec![
        let a = 0xe4;
        println!("{}", a);

        //     [
        //         0xe4, 0x45, 0xa5, 0x2e, 0x51, 0xcb, 0x9a, 0x1d, 0x67, 0xf4, 0x52, 0x1f, 0x2c, 0xf5,
        //         0x77, 0x77,
        //     ],
        //     [
        //         0xe4, 0x45, 0xa5, 0x2e, 0x51, 0xcb, 0x9a, 0x1d, 0x3e, 0x2f, 0x37, 0x0a, 0xa5, 0x03,
        //         0xdc, 0x2a,
        //     ],
        //     [
        //         0xe4, 0x45, 0xa5, 0x2e, 0x51, 0xcb, 0x9a, 0x1d, 0xb1, 0x31, 0x0c, 0xd2, 0xa0, 0x76,
        //         0xa7, 0x74,
        //     ],
        //     [
        //         0xe4, 0x45, 0xa5, 0x2e, 0x51, 0xcb, 0x9a, 0x1d, 0x78, 0xf8, 0x3d, 0x53, 0x1f, 0x8e,
        //         0x6b, 0x90,
        //     ],
        //     [
        //         0xe4, 0x45, 0xa5, 0x2e, 0x51, 0xcb, 0x9a, 0x1d, 0x16, 0x09, 0x85, 0x1a, 0xa0, 0x2c,
        //         0x47, 0xc0,
        //     ],
        //     [
        //         0xe4, 0x45, 0xa5, 0x2e, 0x51, 0xcb, 0x9a, 0x1d, 0x6b, 0xfd, 0xc1, 0x4c, 0xe4, 0xca,
        //         0x1b, 0x68,
        //     ],
        //     [
        //         0xe4, 0x45, 0xa5, 0x2e, 0x51, 0xcb, 0x9a, 0x1d, 0xe1, 0x98, 0xab, 0x57, 0xf6, 0x3f,
        //         0x42, 0xea,
        //     ],
        //     [
        //         0xe4, 0x45, 0xa5, 0x2e, 0x51, 0xcb, 0x9a, 0x1d, 0x5a, 0x17, 0x41, 0x23, 0x3e, 0xf4,
        //         0xbc, 0xd0,
        //     ],
        // ];
        // let res = dis
        //     .into_iter()
        //     .map(|a| encode(a).into_string())
        //     .collect::<Vec<_>>();
        // println!("{:#?}", res);

        // let a = "VBuTFX8Ey5wtP4a9qBzSJJ";
        // let mut b = [0u8;1024];
        // let c = encode(a).onto(b.as_mut());
        // println!("{:?}, {:?}", c, b);
    }
}
